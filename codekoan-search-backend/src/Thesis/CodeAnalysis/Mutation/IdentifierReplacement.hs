-- |
-- Copyright: Christof Schramm 2016
-- Description: Identifier replacement in source code
-- License: All rights reserved
--
-- This module provides functions for systematically replacing indentifiers in
-- source code.
{-# LANGUAGE OverloadedStrings #-}
module Thesis.CodeAnalysis.Mutation.IdentifierReplacement where

import           Control.Monad.Random.Strict
import qualified Data.Set as S
import           Data.Text (Text)
import qualified Data.Text as Text
import qualified Data.Vector as V
import           Thesis.CodeAnalysis.Language
import           Thesis.CodeAnalysis.Mutation.Base
import           Thesis.Data.Range

-- | The set of distinct identifiers in the given piece of source code.
--
-- /The token vector must exactly represent the given language text/
distinctIdentifiers :: Language t l -> (LanguageText l, TokenVector t l)
                    -> S.Set Text
distinctIdentifiers lang (lt, tv) = S.fromList $ do
  t <- V.toList tv
  if isTokenIdentifier lang (token t)
    then return . langText $ underlyingText lt t
    else []

-- | Pick random identifier from the given piece of source code.
--
-- 'Nothing' if no identifiers are present.
--
-- /The token vector must exactly represent the given language text/
randomIdentifier :: MonadRandom m
                 => Language t l
                 -> (LanguageText l, TokenVector t l)
                 -> m (Maybe Text)
randomIdentifier lang (txt, tv) =
  let idv = V.fromList . S.toList $ distinctIdentifiers lang (txt, tv)
  in if V.null idv
     then return Nothing
     else do
       k <- getRandomR (0, V.length idv - 1)
       return . Just $ V.unsafeIndex idv k

-- | Replaces all occurrences of the given id with the given replacement
replaceIdentifier :: Language t l
                  -> (LanguageText l, TokenVector t l)
                  -> Text
                  -- ^ Id to replace
                  -> Text
                  -- ^ Replacement
                  -> LanguageText l
replaceIdentifier lang (txt, vec) idText replacement =
  foldl (\txt' rg ->
            LanguageText $ replaceAt replacement
                                     (convertRange rg)
                                     (langText txt'))
        txt
        relevantTokens
  where
    idLength = Text.length idText
    relevantTokens = reverse $ do
      tokenWithR <- V.toList vec
      if isTokenIdentifier lang (token tokenWithR) &&
         rangeLength (coveredRange tokenWithR) == idLength &&
         underlyingText txt tokenWithR == (LanguageText idText)
        then return (coveredRange tokenWithR)
        else []

-- | Replaces all occurrences of a randomly picked id with the given replacement.
replaceRandomIdentifier :: MonadRandom m
                        => Language t l
                        -> (LanguageText l, TokenVector t l)
                        -> Text
                        -> m (LanguageText l)
replaceRandomIdentifier lang (txt, tv) replacement = do
  randIdMaybe <- randomIdentifier lang (txt, tv)
  case randIdMaybe of
    Nothing -> return txt
    Just randId -> return $ replaceIdentifier lang (txt, tv) randId replacement

-- | Replaces all occurrences of a randomly piecked identifier with a
-- replacement that is randomly generated by some given action.
replaceRandomIdentifierWithRandom :: MonadRandom m
                                     => Language t l
                                  -> (LanguageText l, TokenVector t l)
                                  -> m Text
                                  -> m (LanguageText l)
replaceRandomIdentifierWithRandom lang code getRandId =
  replaceRandomIdentifier lang code =<< getRandId


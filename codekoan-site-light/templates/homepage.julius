var searchsim = null;
//Enable tooltips

var mycode = "fac n :: Int -> Int "

$(document).ready(function(){
    $.getScript("/static/js/highlight.pack.js");
    
    hljs.initHighlightingOnLoad();

    console.log(guessLanguage(mycode));
    
    searchsim = localStorage.getItem('searchsim');

    if(searchsim == null){
	searchsim = "Medium Similarity";
	localStorage.setItem('searchsim', searchsim.toString());
    } else {
	$('#searchsim').html(searchsim);
    }

});

// This guesses the language of a piece of code using
// highlight.js. Really this is a sh***y solution because the function
// blockLanguage that we would actually like to use is minified
// away. Therefore this creates a code block with the code in question
// as content, calls highlightBlock, parses the blocks classes and
// wipes it after.
function guessLanguage(code){
    var lang = 'unknown';

    if(code.length > 30){
    
        $('#blind').text(code);
        $('#blind').each(function(i,block){
        	hljs.highlightBlock(block);
        	lang = block.className.replace("hljs ","");
        });
        $('#blind').text("");
    }

    return lang;

}

function getSearchType(){
    searchsim = ($('#searchsim').text());
    localStorage.setItem('searchsim', searchsim);
    return searchsim;
}

function searchType(t){
    $('#searchsim').html(t);
    searchsim = t;
    localStorage.setItem('searchsim', t);
}

function submitSearch(){
    var lang = $('input[name=lang]:checked').attr('val').replace(/\'/g,'');
    var query = generateQuery(lang);

    var submit = function(){
	$.ajax({
	    url: '/query',
	    type: 'POST',
	    contentType: 'application/json',
	    data: JSON.stringify(query),
	    success: function(data){
		location.href = "/wait/" + data.queryId;
	    },
	    error: function(data){
		console.log("Error on submit: " + data);
	    }
	});
    };
    submit();
}

function generateQuery(language){
    var settings = genSearchSettings(language);
    var text = $('#proginput').val();

    return({ queryText: text
           , queryLanguage: language
	   , queryId: null
	   , querySettings: settings
	   })
}

// Generate standard search settings based on the input from the selector
function genSearchSettings(language){
    var searchType = getSearchType();
    switch(searchType){
    case "High Similarity":
	return({ minMatchLength: 20
	       , levenshteinDistance: 0
	       , coveragePercentage: 0.8
	       , blockFiltering: true
	       , semanticThreshold: 0.6
               , minSumResultLength : 40
	       });
    case "Medium Similarity":
	return({ minMatchLength: 10
	       , levenshteinDistance: 0
	       , coveragePercentage: 0.7
	       , blockFiltering: true
	       , semanticThreshold: 0.3
               , minSumResultLength : 30
	       });
    case "Low Similarity": {
	blockF = language != 'python';
	settings = { minMatchLength: 10
                   , levenshteinDistance: 0
                   , coveragePercentage: 0.5
                   , blockFiltering: true
                   , semanticThreshold: null
                   , minSumResultLength : 20
                   };
	return settings;
    }
    default:
	alert("Unrecognized search settings: " + searchType);
	return null;
    }
}
